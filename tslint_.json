{
  "extends": [
    "tslint:recommended"
  ],
  "rulesDirectory": [
    "node_modules/codelyzer",
    "node_modules/tslint-consistent-codestyle/rules"
  ],
  "rules": {
    // Custom
    "trailing-comma": [
      false,
      {
        "multiline": "always",
        "singleline": "never"
      }
    ],
    "interface-name": [
      false,
      "always-prefix"
    ],
    // Angular 2
    "component-class-suffix": true,
    "component-selector": [
      true,
      "element",
      "hm",
      "kebab-case"
    ],
    "directive-class-suffix": true,
    "directive-selector": [
      true,
      "attribute",
      "hm",
      "camelCase"
    ],
    "import-destructuring-spacing": true,
    "invoke-injectable": true,
    "no-access-missing-member": true,
    "no-attribute-parameter-decorator": true,
    "no-forward-ref": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "pipe-naming": [
      true,
      "camelCase",
      "hm"
    ],
    "templates-use-public": true,
    "use-host-property-decorator": true,
    "use-input-property-decorator": true,
    "use-life-cycle-interface": true,
    "use-output-property-decorator": true,
    "use-pipe-transform-interface": true,
    // General
    "no-console": [
      true,
      "time",
      "timeEnd",
      "trace"
    ],
    "max-line-length": [
      true,
      121
    ],
    "no-string-literal": false,
    "no-use-before-declare": true,
    "object-literal-sort-keys": false,
    "ordered-imports": [
      false
    ],
    "quotemark": [
      true,
      "single",
      "avoid-escape"
    ],
    "variable-name": [
      true,
      "allow-leading-underscore",
      "allow-pascal-case",
      "ban-keywords",
      "check-format"
    ],
    "naming-convention": [
      true,
      // forbid leading and trailing underscores and enforce camelCase on EVERY name. will be overridden by subtypes if needed
      {
        "type": "default",
        "format": "camelCase",
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      // require all global constants to be UPPER_CASE
      // all other variables and functions still need to be camelCase
      {
        "type": "variable",
        "modifiers": [
          "global",
          "const"
        ],
        "format": "UPPER_CASE"
      },
      // allow leading underscores for parameters, because `tsc --noUnusedParameters` will not flag underscore prefixed parameters
      // all other rules (trailingUnderscore: forbid, format: camelCase) still apply
      // since we don't want to inherit this config to `parameterProperties`, we set `final = true`
      {
        "type": "parameter",
        "leadingUnderscore": "allow",
        "final": true
      },
      // require leading underscores for private properties and methods, all other rules still apply
      {
        "type": "member",
        "modifiers": "private",
        "leadingUnderscore": "require"
      },
      // same for protected
      {
        "type": "member",
        "modifiers": "protected",
        "leadingUnderscore": "require"
      },
      // enforce UPPER_CASE for all public static readonly(!) properties
      {
        "type": "property",
        "modifiers": [
          "public",
          "static",
          "const",
          "readonly"
        ],
        "format": "UPPER_CASE"
      },
      // enforce PascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed.
      {
        "type": "type",
        "format": "PascalCase"
      },
      // abstract classes must have the prefix "Abstract". The following part of the name must be valid PascalCase
      {
        "type": "class",
        "modifiers": "abstract",
        "prefix": "Abstract"
      },
      // interface names must start with "I". The following part of the name must be valid PascalCase
      {
        "type": "interface",
        "prefix": "I"
      },
      // generic type parameters must start with "T"
      // most of the time it will only be T, which is totally valid, because an empty string conforms to the PascalCase check
      // By convention T, U and V are used for generics. You could enforce that with "regex": "^[TUV]$" and if you are care that much for performance, you could disable every other check by setting a falsy value
      {
        "type": "genericTypeParameter",
        "prefix": "T"
      },
      // enum members must be in PascalCase. Without this config, enumMember would inherit UPPER_CASE from public static const property
      {
        "type": "enumMember",
        "format": "PascalCase"
      }
    ]
  }
}
